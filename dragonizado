#!/usr/bin/env php
<?php

function println($mensaje){
	echo $mensaje."\n";
}

class dgConsole{

	public function validateDB(){
		println("Validando si existe una instancia de POSTGRES");
	}

	public function validateRequeriments(){
		$valid = true;
		if(!$valid){
			die("No cumples con los requisitos necesarios para instalar la aplicación");
		}
	}

	public function sh(){
		println("Configurancion del entorno");
		$apidomain = "https://api.themoviedb.org/3/";
		$ak = "355152aeffdaa3cfaa9511d9aaee90ce";
		$hasApikey = readline("Tienes un Apikey TMDB? [No,si]:");
		if(!$hasApikey || strtolower($hasApikey) == "n" || strtolower($hasApikey) == "no"){
			println("Utilizando api por defecto");
		}elseif(strtolower($hasApikey) == "s" || strtolower($hasApikey) == "si"){
			println("Tienes api key");
			$ak = readline("Ingresa el tu TMDB key:");
		}else{
			println("No se ha podido interpretar la opcion ingresada puedes dejar en blanco para NO o utilizar S / SI para SI");
		}

		$myenvconfig[] = "TMDB_API_DOMAIN=\"$apidomain\"";
		$myenvconfig[] = "TMDB_API_KEY=$ak";
	
		$domaindess = readline("Deseas utilizar $apidomain como dominio para el api puedes personalizar esto más adelante en el .env [S,n]:") ;
		$domaindess = ($domaindess != "")?$domaindess:"si";
		if($domaindess){
			println("Se utilizó $apidomain como dominio para TMDB Api");
		}else{
			$apidomain = readline("Ingrese el dominio a utilizar:");
			println("Se utilizó $apidomain como dominio para TMDB Api");
		}

		if(file_exists("./.env")){
			$env = fopen(".env","r+");
			$this->putExtrEnv($myenvconfig);
		}else{
			$this->makeEnv($myenvconfig);
		}

		return $this->checkPgsql();
	}

	private function makeEnv($extra = []){
		shell_exec("cp .env.example .env");
		$this->putExtrEnv($extra);
	}

	public function checkPgsql(){

		println("Validando la base de datos");
		$query = "";

		
		$dbhost = readline("El host se encuentra en 127.0.0.1? [S/n]:");
		$dbhost = strtolower($dbhost);
		if(!$dbhost || $dbhost == "si" ||  $dbhost == "s"){
			$dbhost = "127.0.0.1";
		}else{
			if($dbhost != "" || $dbhost == "no" || $dbhost == "n"){
				$dbhost = readline("Ingrese el host a utilizar:");
			}else{
				println("no se puede optener el host, reiniciar la instalación");
			}
		}
		$query = "host=$dbhost ";
		println("Utilizando $dbhost como dbhost.");

		$dbport = readline("El pueto de conexion es 5432 ? [S/n]:");
		$dbport = strtolower($dbport);
		if(!$dbport || $dbport == "si" ||  $dbport == "s"){
			$dbport = "5432";
		}else{
			if($dbport != "" || $dbport == "no" || $dbport == "n"){
				$dbport = readline("Ingrese el puerto a utilizar:");
			}else{
				println("no se puede obtener el puerto de la base de datos, reiniciar la instalación");
			}
		}
		$query .= "port=$dbport ";
		println("Utilizando $dbport como dbport.");

		$dbname = readline("La base de datos es tmdb (dbname por defecto)? [S/n]:");
		$dbname = strtolower($dbname);
		if(!$dbname || $dbname == "si" ||  $dbname == "s"){
			$dbname = "tmdb";
		}else{
			if($dbname != "" || $dbname == "no" || $dbname == "n"){
				$dbname = readline("Ingrese el nombre de la base de datos a utilizar:");
			}else{
				println("no se puede obtener el nombre de la base de datos, reiniciar la instalación");
			}
		}
		$query .= "dbname=$dbname ";
		println("Utilizando $dbname como dbname.");

		$dbuser = readline("El usuario es postgres (por defecto)? [S/n]:");
		$dbuser = strtolower($dbuser);
		if(!$dbuser || $dbuser == "si" ||  $dbuser == "s"){
			$dbuser = "postgres";
		}else{
			if($dbuser != "" || $dbuser == "no" || $dbuser == "n"){
				$dbuser = readline("Ingrese el nombre de usuario a utilizar:");
			}else{
				println("no se puede obtener el nombre de usuario, reiniciar la instalación");
			}
		}
		$query .= "user=$dbuser ";
		println("Utilizando $dbuser como dbuser.");

		$dbpass = readline("Ingrese la contraseña para el usuario $dbuser:");
		$query .= "password=$dbpass ";
		

		println("Probando la conexion con la base de datos");
		$dbconn = pg_connect($query) or die("No se ha podido conectar\n");
		$stat = pg_connection_status($dbconn);
		if ($stat === PGSQL_CONNECTION_OK) {
			println('Estado de la conexión ok');
			return true;
		} else {
			println('No se ha podido conectar');
			return false;
		} 
	}


	private function putExtrEnv($extra = []){
		$env = fopen(".env","r+");
		$createnew = true;
		while(!feof($env)) {
			$linea = fgets($env);
			if($this->validateEnvTMDBKeys($linea,$extra)){
				println("Error: ya existe una configuración en el archivo .env");
				$createnew = false;
				break;
			}
		}
		if($createnew){
			for ($i=0; $i < count($extra); $i++) { 		
				if($i == 0){
					fwrite($env,PHP_EOL.$extra[0].PHP_EOL);
				}else{
					fwrite($env,$extra[$i].PHP_EOL);
				}
			}
			println("Se ha configurado correctamente la aplicación");
		}
		fclose($env);
	}

	private function validateEnvTMDBKeys($line,$tmdbconfig){
		if((string)$line == (string)$tmdbconfig[0].PHP_EOL || $line == $tmdbconfig[1].PHP_EOL){
			return true;
		}
		return false;
	}

	public function install(){
		$this->validateDB();
		echo "Se ha validaddo la instancia de forma segura";
		
		println("Ingresa tu nombre");
		$name = readline();

		println("Bienvenido $name Gracias por hacer parte de esta prueba");

	}

}

$consoleInstall = new dgConsole();


if(isset($argv[1]) && $argv[1] == "--origin=sh"){
	return $consoleInstall->sh();
	exit();
}

if(isset($argv[1]) && $argv[1] == "--dbcheck"){
	$consoleInstall->checkPgsql();
	exit();
}

$consoleInstall->install();
?>
